#!/usr/bin/env python3

import os
import sys
import subprocess
import shutil
from pathlib import Path


SCRIPT_DIR = Path(__file__).parent

def load_ascii_art():
    return """
    ███████╗███╗   ███╗██████╗ ██╗
    ██╔════╝████╗ ████║██╔══██╗██║
    █████╗  ██╔████╔██║██████╔╝██║
    ██╔══╝  ██║╚██╔╝██║██╔══██╗██║
    ██║     ██║ ╚═╝ ██║██║  ██║██║
    ╚═╝     ╚═╝     ╚═╝╚═╝  ╚═╝╚═╝

    ██████╗ ██╗██████╗ ███████╗██╗     ██╗███╗   ██╗███████╗
    ██╔══██╗██║██╔══██╗██╔════╝██║     ██║████╗  ██║██╔════╝
    ██████╔╝██║██████╔╝█████╗  ██║     ██║██╔██╗ ██║█████╗
    ██╔═══╝ ██║██╔═══╝ ██╔══╝  ██║     ██║██║╚██╗██║██╔══╝
    ██║     ██║██║     ███████╗███████╗██║██║ ╚████║███████╗
    ╚═╝     ╚═╝╚═╝     ╚══════╝╚══════╝╚═╝╚═╝  ╚═══╝╚══════╝
    """

class Colors:
    HEADER = '\033[95m'
    BLUE = '\033[94m'
    GREEN = '\033[92m'
    YELLOW = '\033[93m'
    RED = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

def clear_screen():
    os.system('clear' if os.name == 'posix' else 'cls')

def get_terminal_size():
    try:
        columns, rows = shutil.get_terminal_size()
        return columns, rows
    except:
        return 80, 24  # default fallback

def print_centered(text, color=None):
    columns, _ = get_terminal_size()
    text = text.strip()

    if color:
        formatted_text = f"{color}{text}{Colors.ENDC}"
    else:
        formatted_text = text

    print(formatted_text.center(columns))

def print_header():
    columns, _ = get_terminal_size()
    print('\n')
    print('=' * columns)
    print_centered("META-FMRIPREP INTERACTIVE PIPELINE: MENU", Colors.BOLD + Colors.BLUE)
    print('=' * columns)
    print('\n')

def display_ascii_art():
    ascii_art = load_ascii_art()
    print(ascii_art)
    input(f"\n{Colors.GREEN}Press Enter to continue...{Colors.ENDC}")
    clear_screen()

def get_user_input(prompt, options=None, default=None, yes_no=False):
    if yes_no:
        while True:
            if default is not None:
                default_text = "Y/n" if default else "y/N"
                user_input = input(f"{prompt} [{default_text}]: ").strip().lower()
                if user_input == "":
                    return default
            else:
                user_input = input(f"{prompt} [y/n]: ").strip().lower()

            if user_input in ['y', 'yes']:
                return True
            elif user_input in ['n', 'no']:
                return False
            else:
                print(f"{Colors.YELLOW}Please enter 'y' or 'n'.{Colors.ENDC}")
    else:
        while True:
            if default is not None:
                user_input = input(f"{prompt} [{default}]: ").strip()
                if user_input == "":
                    return default
            else:
                user_input = input(f"{prompt}: ").strip()

            if options is None:
                if user_input:  # ensure non-empty input
                    return user_input
                else:
                    print(f"{Colors.YELLOW}Input cannot be empty.{Colors.ENDC}")
            elif user_input in [str(o) for o in options]:
                return user_input
            else:
                print(f"{Colors.YELLOW}Invalid input. Please enter one of: {', '.join([str(o) for o in options])}{Colors.ENDC}")

def display_menu():
    print_header()

    menu_items = [
        ("1", "Download from FlyWheel -> Server"),
        ("2", "Convert raw MRI data directory to BIDS"),
        ("3", "Run dcm2niix to extract MRI DICOM headers to JSON files in BIDS format"),
        ("4", "Prep for fMRIPrep (remove dummy scans, update fmap JSON metadata, config fmap SDC)"),
        ("5", "Run fMRIPrep anatomical workflows only (if doing manual edits, otherwise skip to step 8)"),
        ("6", "Download Freesurfer output for manual surface editing"),
        ("7", "Reupload edited Freesurfer directories"),
        ("8", "Run remaining fMRIPrep steps"), # end at step of minimal preprocessing 
        ("9", "QC: Verify dcm -> nii -> bids metadata")
        # and now can have portable reusable datasets to upload to open neuro and or just use for other analysis without needing to redo any of this prep work
        # make any adjustments pre analysis modeling as necessary
        # failure mode: verification that the edited file persisted through step 8 we need to somehow make sure the fmriprep is using the edited files (in the event theyre misnamed, after number 8 finishes, if it generated a new batch of fmri anatomical scans md5 checksum with manual edit vs. md5 of the anatomical file its using for the next step)
        #("9", "Run postprocessing (spatial smoothing, group average volume)")
    ]

    print(f"{Colors.BOLD}Select the prep step you want to run:{Colors.ENDC}\n")
    for key, description in menu_items:
        print(f"{Colors.GREEN}{key}.{Colors.ENDC} {description}")
    print()

    options = [item[0] for item in menu_items]
    step_choice = get_user_input("Enter your choice", options)

    return step_choice

def get_parameters(step_choice):
    step_params = {
        "1": {  # Step 1 (Flywheel Downloader)
            "keys": ["fw_subid", "fw_session_id"],
            "prompts": ["Subject ID on Flywheel?", "Session ID on Flywheel?"]
        },
        "2": {  # Step 2 (Raw 2 BIDS)
            "keys": ["fw_session_id", "new_bids_id_number"],
            "prompts": ["Session ID on Flywheel?", "What subject ID number would you like to assign for BIDS?"]
        },
        "3": {  # Step 3 (dcm2niix BIDS)
            "keys": ["fw_session_id", "new_bids_id_number"],
            "prompts": ["Session ID on Flywheel?", "Subject ID you assigned in STEP 2?"]
        },
        "4": {  # Step 4 (PREPare)
            "keys": [],
            "prompts": []
        },
        "5": {  # Step 5 (fmriprep --anat-only)
            "keys": [],
            "prompts": []
        },
        # "5": {  # Step 5 (fmriprep)
        #     "keys": ["anat_only"],
        #     "prompts": ["Only run anatomical workflows?"]
        # },
        "6": {  # Step 6 (postproc)
            "keys": [],
            "prompts": []
        },
        "9": {
            "keys": ["bids_id_number"],
            "prompts": ["Assigned BIDS Subj ID?"]
        }
    }

    param_keys = step_params[step_choice]["keys"]
    param_prompts = step_params[step_choice]["prompts"]

    user_inputs = []

    for i in range(len(param_keys)):
        key = param_keys[i]
        prompt = param_prompts[i]

        # special case for anat-only yes/no
        if key == "anat_only":
            response = get_user_input(prompt, yes_no=True)
            if response:
                user_inputs.append("--anat-only")
        else:
            input_value = get_user_input(prompt)
            user_inputs.append(input_value)

    return user_inputs, param_keys

def confirm_parameters(user_inputs, param_keys):
    if not user_inputs:
        return True

    print(f"\n{Colors.BOLD}You have entered the following parameters:{Colors.ENDC}")

    for i, value in enumerate(user_inputs):
        if i < len(param_keys):
            key = param_keys[i]
            print(f"  {key}: {value}")
        else:
            print(f"  Parameter {i}: {value}")

    print()
    return get_user_input("Proceed with execution?", yes_no=True, default=True)

def run_script(step_choice, user_inputs):
    # map step choice to script name
    scripts = {
        "1": "01-run.sbatch",
        "2": "02-run.sbatch",
        "3": "03-run.sbatch",
        "4": "04-run.sbatch",
        "5": "05-run.sbatch",
        "6": "06-run.sbatch",
        "7": "07-run.sbatch",
        "8": "08-run.sbatch",
        "9": "toolbox/verify_nii_metadata.sh"
    }

    selected_script = scripts[step_choice]

    cmd = ["bash", selected_script] + user_inputs

    print(f"\n{Colors.BOLD}Executing:{Colors.ENDC} {' '.join(cmd)}")

    try:
        subprocess.run(cmd)
    except Exception as e:
        print(f"{Colors.RED}Error running script: {e}{Colors.ENDC}")
        return False

    return True

def main():
    clear_screen()
    display_ascii_art()

    step_choice = display_menu()
    clear_screen()

    user_inputs, param_keys = get_parameters(step_choice)

    if confirm_parameters(user_inputs, param_keys):
        success = run_script(step_choice, user_inputs)

        if success:
            print(f"\n{Colors.GREEN}Script executed successfully.{Colors.ENDC}")
        else:
            print(f"\n{Colors.RED}Script execution failed.{Colors.ENDC}")
    else:
        print(f"\n{Colors.YELLOW}Operation cancelled.{Colors.ENDC}")

if __name__ == "__main__":
    main()
